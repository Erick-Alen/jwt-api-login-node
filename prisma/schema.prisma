// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id       String @id @default(uuid()) @db.Uuid
  name     String
  email    String @unique
  password String
  roleId   String @map("role_id") @db.Uuid

  role Role @relation(fields: [roleId], references: [id])

  @@map("accounts")
}

model Role {
  id          String           @id @default(uuid()) @db.Uuid
  name        String
  // field to store defaul code role when the user is created
  // default     String @default("USER")
  accounts    Account[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id    String           @id @default(uuid()) @db.Uuid
  name  String
  code  String           @unique

  roles RolePermission[]

  @@map("permissions")
}

//obs: prisma uses an implicit many-to-many relationship implementation
// for roles and permissions tables, and automatically creates the pivot table
// in this case i will be creasted the pivot table manually
model RolePermission {
  permissionCode String     @map("permission_code")
  roleId         String     @map("role_id") @db.Uuid
  
  role           Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission     Permission @relation(fields: [permissionCode], references: [code])

  @@id([permissionCode, roleId])
  @@map("roles_permissions")
}
